* hola-tact-meet

Holacracy has many practical concepts, one of them is Tactical Meetings - structured
way to discuss & action on the ongoing project issues.

We are not using Holacracy but I want to replicate some of its structure with this
program so we can try some concepts in our team.

See also [[https://orgpad.info/o/AZXSvxkUdIo7kZUmIwy7SP][Orgpad: Structural Meetings Idea]]

** Architecture

MPA - Clojure / Luminos framework on backend and HTMX on frontend.

** Prerequisites

You will need [[https://github.com/technomancy/leiningen][Leiningen]] 2.0 or above installed.

** Running

To start a web server for the application, run:

#+begin_example
lein run
#+end_example

** Dev info

*** Reload queries in REPL
    :LOGBOOK:
    - Note taken on [2024-10-02 Wed 07:10]
    :END:

    #+begin_example
    (in-ns 'hola-tact-meet.db.core)
    (conman/bind-connection *db* "sql/queries.sql")
    #+end_example

** Development plan [4/11]
*** DONE Static files libraries to use
    CLOSED: [2024-09-24 Tue 11:10]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2024-09-24 Tue 11:10]
    CLOCK: [2024-09-24 Tue 08:49]--[2024-09-24 Tue 11:12] =>  2:23
    - State "TODO"       from              [2024-09-23 Mon 08:30]
    :END:
**** DONE Bulma CSS - use latest version
     CLOSED: [2024-09-24 Tue 08:50]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2024-09-24 Tue 08:50]
     - State "TODO"       from              [2024-09-23 Mon 08:30]
     :END:
**** DONE Add both Htmx & Alpine
     CLOSED: [2024-09-24 Tue 11:10]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2024-09-24 Tue 11:10]
     - State "TODO"       from              [2024-09-23 Mon 08:30]
     :END:
*** DONE Implement Google SSO
    CLOSED: [2024-09-29 Sun 08:30]
    :LOGBOOK:
    - State "DONE"       from "NEXT"       [2024-09-29 Sun 08:30]
    - State "NEXT"       from "TODO"       [2024-09-24 Tue 14:10]
    - State "TODO"       from              [2024-09-23 Mon 08:30]
    :END:

 - [X] May be use shortcut from Ngrok? https://ngrok.com/docs/integrations/google/oauth/

*** WORKING Which calendar to use for date & time fields?
    :LOGBOOK:
    CLOCK: [2024-10-03 Thu 07:30]--[2024-10-03 Thu 10:53] =>  3:23
    - State "WORKING"    from              [2024-10-02 Wed 21:05]
    :END:
 - https://doc.mh-s.de/bulma-calendar/demonstration/date/
 - 
*** WORKING Basic Layout: Decide & implement  [80%]
    :LOGBOOK:
    - State "WORKING"    from "TODO"       [2024-09-30 Mon 07:45]
    CLOCK: [2024-09-29 Sun 08:34]--[2024-09-29 Sun 09:03] =>  0:29
    - State "TODO"       from              [2024-09-23 Mon 08:30]
    :END:

 - [X] Fix burger - use alpine instead of vanilla JS
 - [ ] Switch menu using htmx reload of content
 - [X] Redesign error message differently
 - [X] Teams list
 - [X] Meetings list

*** NEXT Develop (ngrok?) authentication middleware
    :LOGBOOK:
    - State "NEXT"       from "TODO"       [2024-09-29 Sun 08:30]
    - State "TODO"       from "WORKING"    [2024-09-29 Sun 08:30]
    CLOCK: [2024-09-25 Wed 09:59]--[2024-09-25 Wed 10:45] =>  0:46
    - State "WORKING"    from "TODO"       [2024-09-25 Wed 10:00]
    - State "TODO"       from              [2024-09-25 Wed 09:55]
    :END:

 - Reading:
   - https://dev.to/fpsd/clojure-bites-ring-basic-auth-2jf2
   - https://cljdoc.org/d/ring-auth/ring-auth/0.1.0/api/ring-auth.middleware
   - https://github.com/weavejester/ring-oauth2
   - https://stackoverflow.com/questions/48953586/how-to-authenticate-a-subset-of-routes-in-ring-application
   - https://github.com/funcool/buddy-auth
   - https://medium.com/helpshift-engineering/on-the-testability-of-ring-middlewares-in-clojure-6795eae60f2a
   - [2024-09-29 Sun 08:30] stuck with middleware, continue on other side

*** NEXT use some clojure oauth library instead of ngrok!
    :LOGBOOK:
    - State "NEXT"       from              [2024-10-01 Tue 10:30]
    :END:

 - Reason #1 - more sub-domains are not provided even in paid version :-(

*** DONE Add User (auto)
    CLOSED: [2024-10-01 Tue 10:30]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2024-10-01 Tue 10:30]
    - State "TODO"       from              [2024-09-30 Mon 07:45]
    :END:

*** DONE Add Team [2/2]
    CLOSED: [2024-10-04 Fri 08:20]
    :LOGBOOK:
    - State "DONE"       from "WORKING"    [2024-10-04 Fri 08:20]
    CLOCK: [2024-09-30 Mon 08:02]--[2024-09-30 Mon 09:30] =>  1:28
    - State "WORKING"    from "TODO"       [2024-09-30 Mon 07:50]
    - State "TODO"       from              [2024-09-30 Mon 07:45]
    :END:

 - [X] Add team
 - [X] Refresh page after adding (use HX-redirect)
 - +[ ] Add validation?+

*** Unique team name

 - [ ] Add form validation
 - [ ] Add unique index

*** Manage meetings [0/3]

 - [ ] Add meeting
   - [ ] validate time
   - [ ] validate duration: int, less then 3 hrs = 180min
   - [ ] agenda should not exceed N chars
   - [ ] date should not be in past
   - [ ] combine time & date into datetime
 - [ ] Basic meetings list
 - [ ] Topic, Actions counts
 - [ ] Teams, invited
 - [ ] Additional selections:
   - [ ] Current
   - [ ] today
   - [ ] future
   - [ ] past

*** TODO Join Team / Leave Team
    :LOGBOOK:
    - State "TODO"       from              [2024-09-30 Mon 07:45]
    :END:

*** TODO Actions list
    :LOGBOOK:
    - State "TODO"       from              [2024-09-30 Mon 07:45]
    :END:

*** TODO Use db logging [/]
    :LOGBOOK:
    - State "TODO"       from              [2024-09-30 Mon 07:45]
    :END:

 - [ ] use system / file logging!
 - [ ] use db logging

** License

Generated using Luminus version "3.91"
Copyright Â© 2024 Oleksii Koval
