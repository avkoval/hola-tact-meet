* hola-tact-meet

** Purpose

This is my third attempt to develop software that facilitates and structures team meetings in a Holacracy style.
Although my team does not operate under a typical Holacracy framework, I believe there is significant potential in
adopting its principles, especially when it comes to effective facilitation and achieving clear outcomes.

One practical concept from Holacracy is Tactical Meetings, which provide a structured approach to discussing and
addressing ongoing project issues. My goal with this program is to incorporate some of these elements into our team
meetings, allowing us to experiment with Holacracy concepts and use them in current projects.

See also [[https://orgpad.info/o/AZXSvxkUdIo7kZUmIwy7SP][Orgpad: Structural Meetings Idea]]

** Planned features

 - Identification & Authorization

   - [ ] Google Auth
   - (maybe) Jira auth

 - Permission levels
   - Admin (can manager allowed domains and setup Oauth screens)
   - Manager (can manage teams)
   - User (can participate in the teams and meetings)

 - Main screen
   - Some explanation what this is and what it does
   - Login button

 - App screen (for logged in users)
   - User:
     - Join existing meeting
     - List past meetings
     - Personal actions - todo list
     - ⚙ user profile settings
       - avatar, username, etc

   - Manager
     - Create/start new meeting
       - Meeting description
       - ☑ Allow vote for topic
       - ☑ Sort topics by votes
       - Join URL (Google Meet, Zoom, etc)
     - Edit past meetings data (todo actions etc)
     - Activate/Deactivate (show/hide) past meetings data

   - Admin
     - ⚙ project settings link

 - Meeting

   - Rounds:

     For each round - display the actual documentation at the other half of the screen, explaning roles & actions
     of people involved, to easy the process of onboarding to this new meeting structure.

     - Check-in round
     - Checklist review
     - Metrics review
     - +Project progress updates+ (Projects are not planned for 1st release)

   - Topics (tensions)
     - Add topic to discuss
     - Voting for topic (if enabled)
     - Sorting topics by vote (if enabled)
     - Countdown timer (if enabled and set for topic)
     - Discussion phases: (traige issues)
       - Explanation (Raise Topic)
       - Questions round
       - Opinions round
       - Objections round
       - Acceptance (Decision round):
         - Accept or Decline
         - Secretary: write down the action items

   - Finalize:
     - Export as:
       - Doc
       - PDF
       - Directly to Confluence via API (if API is enabled)

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:

Download from https://github.com/avkoval/hola-tact-meet

** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:
FIXME: explanation

Run the project directly, via =:exec-fn=:

#+begin_example
$ clojure -X:run-x
Hello, Clojure!
#+end_example

Run the project, overriding the name to be greeted:

#+begin_example
$ clojure -X:run-x :name '"Someone"'
Hello, Someone!
#+end_example

Run the project directly, via =:main-opts= (=-m ok.hola-tact-meet=):

#+begin_example
$ clojure -M:run-m
Hello, World!
#+end_example

Run the project, overriding the name to be greeted:

#+begin_example
$ clojure -M:run-m Via-Main
Hello, Via-Main!
#+end_example

Run the project's tests (they'll fail until you edit them):

#+begin_example
$ clojure -T:build test
#+end_example

Run the project's CI pipeline and build an uberjar (this will fail until
you edit the tests to pass):

#+begin_example
$ clojure -T:build ci
#+end_example

Run that uberjar:

#+begin_example
$ java -jar target/hola-tact-meet-0.1.0-SNAPSHOT.jar
#+end_example

** Options
:PROPERTIES:
:CUSTOM_ID: options
:END:
FIXME: listing of options this app accepts.

** Examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:
...

*** Bugs
:PROPERTIES:
:CUSTOM_ID: bugs
:END:
...

*** Any Other Sections
:PROPERTIES:
:CUSTOM_ID: any-other-sections
:END:
*** That You Think
:PROPERTIES:
:CUSTOM_ID: that-you-think
:END:
*** Might be Useful
:PROPERTIES:
:CUSTOM_ID: might-be-useful
:END:
** License

Copyright © 2025 Oleksii Koval

Distributed under the MIT License

** COMMENT Current work plan & progress [42%]

*** DONE Set appropriate License
    CLOSED: [2025-06-15 Sun 21:30]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2025-06-15 Sun 21:30]
    - State "TODO"       from              [2025-06-15 Sun 20:15]
    :END:

*** DONE Add all required modules
    CLOSED: [2025-06-15 Sun 21:20]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2025-06-15 Sun 21:20]
    :END:
    - [X] ring
    - [X] datastar sdk
    - [X] datastar js
    - [X] bulma
    - [X] selmer
    - [X] reitit/ring
    - [X] cider-nrepl
    - [X] nrepl

*** DONE Home page and reload
    CLOSED: [2025-06-16 Mon 08:55]
    :LOGBOOK:
    - State "DONE"       from "DONE"       [2025-06-16 Mon 08:55]
    - State "DONE"       from "WORKING"    [2025-06-16 Mon 08:55]
    CLOCK: [2025-06-16 Mon 07:14]--[2025-06-16 Mon 08:55] =>  1:41
    - State "WORKING"    from "TODO"       [2025-06-16 Mon 07:15]
    :END:

 - [X] Add home.html template
 - [X] Add ring server handler, homepage view
 - [X] Make sure code reload is working fine
 - [X] Use bulma.css from CDN

*** TODO Make sure to enable gzip or even better: brothli compression
    :LOGBOOK:
    - State "TODO"       from              [2025-06-15 Sun 20:55]
    :END:

    https://andersmurphy.com/2025/04/15/why-you-should-use-brotli-sse.html

*** TODO Admin settings & preferences
    :LOGBOOK:
    - State "TODO"       from              [2025-06-18 Wed 10:45]
    :END:
**** TODO List users (separate page) (for admin)
     :LOGBOOK:
     - State "TODO"       from              [2025-06-18 Wed 10:25]
     :END:
***** TODO Change access level to manager (as admin)
      :LOGBOOK:
      - State "TODO"       from              [2025-06-18 Wed 10:25]
      :END:
*** TODO Enable Datomic
    :LOGBOOK:
    - State "TODO"       from              [2025-06-18 Wed 10:20]
    :END:
*** TODO First App screen [37%]
    :LOGBOOK:
    - State "TODO"       from              [2025-06-18 Wed 10:45]
    :END:
**** DONE config
     CLOSED: [2025-06-22 Sun 16:05]
     :LOGBOOK:
     - State "DONE"       from "WORKING"    [2025-06-22 Sun 16:05]
     CLOCK: [2025-06-21 Sat 08:37]--[2025-06-21 Sat 08:52] =>  0:15
     CLOCK: [2025-06-21 Sat 07:02]--[2025-06-21 Sat 07:13] =>  0:11
     CLOCK: [2025-06-20 Fri 08:10]--[2025-06-20 Fri 08:54] =>  0:44
     - State "WORKING"    from "TODO"       [2025-06-19 Thu 07:50]
     - State "TODO"       from              [2025-06-19 Thu 07:50]
     :END:
https://github.com/juxt/aero
**** DONE ring-oauth2/ring-oauth2
     CLOSED: [2025-06-22 Sun 16:05]
     :LOGBOOK:
     - State "DONE"       from              [2025-06-22 Sun 16:05]
     :END:
https://github.com/weavejester/ring-oauth2
**** WORKING Implement Sign In with Google
     :LOGBOOK:
     CLOCK: [2025-06-22 Sun 16:07]
     - State "WORKING"    from "TODO"       [2025-06-22 Sun 16:05]
     - State "TODO"       from              [2025-06-18 Wed 10:20]
     :END:

 - [X] implement sign in with ~bulma~ button done:[2025-06-22 Sun 16:15]
 - [X] change title from "Welcome to Bulma"
 - [ ] comment out ~Bulma~ button and use /google js version/
   - following https://developers.google.com/identity/gsi/web/guides/display-button
   - 

**** REJECTED Implement Sign In with Jira (lets do it in next round, if needed!)
     CLOSED: [2025-06-22 Sun 16:05]
     :LOGBOOK:
     - State "REJECTED"   from "TODO"       [2025-06-22 Sun 16:05]
     - State "TODO"       from              [2025-06-18 Wed 10:20]
     :END:
**** TODO Add top menu
     :LOGBOOK:
     - State "TODO"       from              [2025-06-18 Wed 10:20]
     :END:
**** TODO Add help / from markdown as usual
**** TODO List past meetings
     :LOGBOOK:
     - State "TODO"       from              [2025-06-18 Wed 10:25]
     :END:
**** TODO Make some user admin (from cli, after registration)
     :LOGBOOK:
     - State "TODO"       from              [2025-06-18 Wed 10:25]
     :END:
